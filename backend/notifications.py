import pywhatkit
import time
from threading import Thread
import logging

# Configurar logging para notificaciones
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def enviar_alerta_whatsapp(numero_destino, producto, resultados):
    """
    Env√≠a una notificaci√≥n por WhatsApp con los resultados de la b√∫squeda.
    
    ADVERTENCIA: Esta funci√≥n utiliza pywhatkit que automatiza WhatsApp Web.
    Esto va contra los t√©rminos de servicio de WhatsApp y puede resultar
    en el bloqueo de tu cuenta. √ösalo bajo tu propio riesgo y considera
    migrar a la API oficial de Meta para uso en producci√≥n.
    
    Args:
        numero_destino (str): N√∫mero de tel√©fono con c√≥digo de pa√≠s (ej: +51987654321)
        producto (str): Nombre del producto buscado
        resultados (list): Lista de productos encontrados
    """
    try:
        # Validar el n√∫mero de tel√©fono
        if not numero_destino or not numero_destino.startswith('+'):
            logger.error("Error: El n√∫mero debe incluir el c√≥digo de pa√≠s (ej: +51987654321)")
            return False
        
        # Construir el mensaje
        if not resultados:
            mensaje = _crear_mensaje_sin_resultados(producto)
        else:
            mensaje = _crear_mensaje_con_resultados(producto, resultados)
        
        logger.info(f"Enviando notificaci√≥n WhatsApp a {numero_destino}")
        
        # Enviar el mensaje instant√°neamente
        # Nota: wait_time=15 significa que esperar√° 15 segundos antes de enviar
        # tab_close=True cerrar√° la pesta√±a despu√©s del env√≠o
        pywhatkit.sendwhatmsg_instantly(
            numero_destino, 
            mensaje, 
            wait_time=15, 
            tab_close=True,
            close_time=5
        )
        
        logger.info(f"Mensaje de WhatsApp enviado exitosamente a {numero_destino}")
        return True
        
    except Exception as e:
        logger.error(f"Error al enviar WhatsApp a {numero_destino}: {e}")
        return False

def _crear_mensaje_sin_resultados(producto):
    """Crea un mensaje cuando no se encontraron resultados."""
    return (
        f"üîç *B√∫squeda: {producto}*\n\n"
        "üòî Lo sentimos, no encontramos ofertas para este producto en este momento.\n\n"
        "üí° *Sugerencias:*\n"
        "‚Ä¢ Intenta con palabras clave m√°s generales\n"
        "‚Ä¢ Revisa la ortograf√≠a\n"
        "‚Ä¢ Prueba en unos minutos m√°s\n\n"
        "¬°Seguimos buscando las mejores ofertas para ti! üõí‚ú®"
    )

def _crear_mensaje_con_resultados(producto, resultados):
    """Crea un mensaje con los resultados encontrados."""
    # Ordenar por precio y tomar los mejores
    mejores_ofertas = sorted(resultados, key=lambda x: x['precio'])[:3]
    mejor_oferta = mejores_ofertas[0]
    
    mensaje = f"üéâ *¬°Ofertas encontradas para: {producto}!*\n\n"
    
    # Mostrar la mejor oferta destacada
    mensaje += "üèÜ *MEJOR OFERTA:*\n"
    mensaje += f"üì¶ {mejor_oferta['nombre'][:60]}{'...' if len(mejor_oferta['nombre']) > 60 else ''}\n"
    mensaje += f"üí∞ *S/ {mejor_oferta['precio']:.2f}*\n"
    mensaje += f"üè™ {mejor_oferta['tienda'].title()}\n"
    
    if mejor_oferta.get('descuento'):
        mensaje += f"üî• ¬°{mejor_oferta['descuento']}% de descuento!\n"
    
    mensaje += f"üîó {mejor_oferta['link']}\n\n"
    
    # Mostrar otras ofertas si hay m√°s
    if len(mejores_ofertas) > 1:
        mensaje += "üìã *Otras ofertas destacadas:*\n"
        for i, oferta in enumerate(mejores_ofertas[1:], 2):
            mensaje += f"{i}. S/ {oferta['precio']:.2f} - {oferta['tienda'].title()}\n"
        mensaje += "\n"
      # Estad√≠sticas
    mensaje += "üìä *Resumen:*\n"
    mensaje += f"‚Ä¢ {len(resultados)} productos encontrados\n"
    
    if len(resultados) > 1:
        precio_max = max(resultados, key=lambda x: x['precio'])['precio']
        ahorro = precio_max - mejor_oferta['precio']
        if ahorro > 0:
            mensaje += f"‚Ä¢ Ahorras hasta S/ {ahorro:.2f} eligiendo la mejor oferta\n"
    
    mensaje += "\n¬°Aprovecha estas ofertas antes de que se agoten! üõí‚ö°"
    
    return mensaje

def enviar_notificacion_async(numero_destino, producto, resultados):
    """
    Env√≠a la notificaci√≥n en un hilo separado para no bloquear la aplicaci√≥n.
    
    Args:
        numero_destino (str): N√∫mero de tel√©fono
        producto (str): Producto buscado
        resultados (list): Resultados de la b√∫squeda
    """
    def _enviar():
        time.sleep(2)  # Peque√±a espera para asegurar que la respuesta HTTP se env√≠e primero
        enviar_alerta_whatsapp(numero_destino, producto, resultados)
    
    thread = Thread(target=_enviar, daemon=True)
    thread.start()
    return thread

def validar_numero_telefono(numero):
    """
    Valida que el n√∫mero de tel√©fono tenga el formato correcto.
    
    Args:
        numero (str): N√∫mero a validar
        
    Returns:
        tuple: (es_valido, numero_limpio, mensaje_error)
    """
    if not numero:
        return False, "", "N√∫mero de tel√©fono requerido"
    
    # Limpiar el n√∫mero
    numero_limpio = numero.strip().replace(" ", "").replace("-", "")
    
    # Verificar que comience con +
    if not numero_limpio.startswith('+'):
        return False, numero_limpio, "El n√∫mero debe incluir el c√≥digo de pa√≠s (ej: +51987654321)"
    
    # Verificar longitud m√≠nima (+ c√≥digo pa√≠s + n√∫mero)
    if len(numero_limpio) < 10:
        return False, numero_limpio, "El n√∫mero parece ser muy corto"
    
    # Verificar que despu√©s del + solo haya n√∫meros
    if not numero_limpio[1:].isdigit():
        return False, numero_limpio, "El n√∫mero solo debe contener d√≠gitos despu√©s del +"
    
    return True, numero_limpio, ""

# Funci√≥n para testing (solo para desarrollo)
def test_notificacion():
    """Funci√≥n de prueba - NO USAR EN PRODUCCI√ìN"""
    productos_prueba = [
        {
            'nombre': 'Laptop HP Pavilion 15.6" Intel Core i5',
            'precio': 2499.00,
            'tienda': 'ripley',
            'link': 'https://simple.ripley.com.pe/laptop-hp-test',
            'descuento': 15
        },
        {
            'nombre': 'Laptop Lenovo IdeaPad 14" Intel Core i3',
            'precio': 1899.00,
            'tienda': 'falabella',
            'link': 'https://falabella.com.pe/laptop-lenovo-test',
            'descuento': None
        }
    ]
    
    print("=== MENSAJE DE PRUEBA ===")
    mensaje = _crear_mensaje_con_resultados("laptop", productos_prueba)
    print(mensaje)
    print("=" * 50)

if __name__ == '__main__':
    # Ejecutar test
    test_notificacion()
